#### HTML

	<div id="view"> <!-- Wrapper -->
		<div> <!-- Scrooller -->
			<div class="[prefix]index" data-text="...">	<!-- index. data-text는 인덱스뷰를 사용하여 뷰내용을 다르게 구성할때만 지정한다.-->
			</div>
			
			스크롤될 대상 ul or div....
			
			<div class="[prefix]index" data-text="...">	<!-- index. data-text는 인덱스뷰를 사용하여 뷰내용을 다르게 구성할때만 지정한다.-->
			</div>
			
			스크롤될 대상 ul or div....
			
			<div class="[prefix]index" data-text="...">	<!-- index. data-text는 인덱스뷰를 사용하여 뷰내용을 다르게 구성할때만 지정한다.-->
			</div>

			스크롤될 대상 ul or div....

		</div>
	</div>

IndexScroll 컴포넌트는 Scroll 컴포넌트와 동일하게 최상위 Wrapper과 그 자식 Scroller div로 구성되며, 실제 스크롤링 하고자 하는 대상은 Scroller div하위에 존재한다.
<br><br> 

* Scroller는 Wrapper의 첫번째 엘리먼트가 Scroller가 된다.
* 인덱싱 하고자하는 엘리먼트를 Scroller 내부에 추가 할 수 있다.
* 이때, 추가되는 인덱스 엘리먼트의 class는 [prefix] + index이다.

<br> 
최상위 Wrapper는 내부적으로 __overflow:hidden__ 속성이 설정된다.

만약, Wrapper의 position이 static일 경우는 __positon:relative__으로 설정된다.

Scroller는 __position:absolute__ 속성이 설정된다.

Scroller 하위는 __position:static, position:relative__ 속성만 사용할 수 있다.

#### Javascript

	var oScroll = new jindo.m.IndexScroll("view", {
		bActivateOnload : true,
		bUseIndexView : false,
		bUseScrollbar : true,
		bUseFixedScrollbar : false,
		sClassPrefix : "scroll_",
		bUseBounce : true,
		bAutoResize : false,
		nOffsetTop : 0,
		nOffsetBottom : 0
	});

최상위 Wrapper를 생성자의 첫번째 파라미터로 받는다.
