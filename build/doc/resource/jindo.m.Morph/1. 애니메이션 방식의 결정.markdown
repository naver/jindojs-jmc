#### 애니메이션 방식

Morph 에서 애니메이션을 구현하기 위해서 사용하는 방법에는 다음 두가지 방법이 있다.

- CSS Transtion
> CSS 에 존재하는 transition 속성을 이용하는 방법으로 CSS 로 종료값만 지정해주면 자동적으로 애니메이션 동작이 이루어지기 때문에 구현이 간편하고 브라우저가 직접 애니메이션을 진행하기 때문에 일반적으로 구현 성능이 좋다. 하지만 최신의 브라우저에만 지원하며 지원하더라도 동작에 버그를 가지고 있는 일부 환경이 존재한다.

- setTimeout/requestAnimationFrame
> 짧은 시간마다 조금씩 수치를 바꿔 적용하는 식으로 애니메이션을 구현하는 방법이며, 모든 브라우저에서 사용 가능한 방법이다. 애니메이션을 직접 구현해야 하기 때문에 성능이 조금 떨어질 수 있다.

#### 그렇다면 Morph 에서 사용하는 애니메이션 방식은?

Morph 에서는 기본적으로 성능상의 우위를 가지고 있는 CSS Transition 을 사용하는 방법을 우선적으로 선택한다.
하지만 다음 중 한가지 상황에라도 적용되는 상황에서는 setTimeout/requestAnimationFrame 을 사용하게 된다.

- 시스템에서 CSS Transition 을 지원하지 않는 경우

- bUseTransition 옵션을 false 로 한 경우
> CSS Transition 옵션을 아예 쓰지 않도록 false 로 설정했기 때문에 당연히 CSS Transtion 을 사용하지 않는다.

- CSS 속성을 변화시키지 않는 경우
> 가령 scrollTop 과 같은 CSS 속성이 아닌 일반적인 속성을 변화시키는 경우에는 어쩔수 없이 CSS Transition 을 사용하지 못한다.

- 지원하지 않은 Timing-Function 을 사용한 경우
> CSS 에서 지원하지 않는 Timing-Function 을 사용한 경우 CSS Transition 을 사용하지 않는다. CSS 에서 지원하는 Timing-Function 은 linear, cubicEase, cubicEaseIn, cubicEaseOut, cubicEaseInOut, cubicBezier 이다.

- Morph 객체 전체에서 사용하는 Timing-Function 과 특정 속성에서 사용하는 Timing-Function 이 다른 경우
>가령 아래와 같이 코드를 작성한 경우, Morph 에는 linear 가 적용되어 있는 상태에서 backgroundColor 에만 cubicEaseIn 을 적용했기 때문에 backgroundColor 속성을 변화 시킬 때는 CSS Transition 을 사용하지 않는다.

		var morph = new jindo.m.Morph({
			bUseTransition: true,
			fEffect : jindo.m.Effect.linear
		});

		morph.pushAnimate(1000, [
			document.body, {
				'@backgroundColor' : jindo.Effect.cubicEaseIn('#f00')
			}
		]);

- Morph 객체에 beforeProgress, progress 이벤트 핸들러를 등록한 경우
> CSS Transition 으로 애니메이션이 진행 될 때는 진행 상황을 알 수 없기 때문에 beforeProgress, progress 이벤트를 등록 한 경우에는 무조건 setTimeout/requestAnimationFrame 을 사용하여 동작한다.
